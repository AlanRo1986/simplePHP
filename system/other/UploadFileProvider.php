<?php
/**
 * Created by PhpStorm.
 * User: Alan 341455770@qq.com
 * Date: 2017/05/27 0027
 * Time: 10:06
 *
 * example:
 * does not crop:
 * $upload = app()->getInstance(UploadFileProvider::class);
 * $res = $upload->initialize($image,"test")->save();
 *
 * dose crop the image:
 * $upload = app()->getInstance(UploadFileProvider::class);
 * $res = $upload
 *              ->setCropX(60)
 *              ->setCropY(60)
 *              ->setCropWidth(860)
 *              ->setCropHeight(456)
 *              ->initialize($image,"test")
 *              ->save();
 * return:
 * array(size = 8)
 * 'responseCode' => int 1
 * 'responseError' => string 'success.' (length=13)
 * 'size' => int 42
 * 'cropX' => int 60
 * 'cropY' => int 60
 * 'cropW' => int 860
 * 'cropH' => int 456
 * 'url' => string '/public/attachment/images/20170527/e9fef9c64cc51c5af079e3936694cea5.jpg' (length=71)
 *
 */

namespace App\System\Other;


use App\System\Basic\Provider;
use App\System\Store\FileProvider;

class UploadFileProvider extends Provider
{

    const ERROR = [
        0 => "does not initialize.",
        1 => "success.",
        2 => "Upload file of type must be jpeg/png/gif.",
        3 => "The file size out of range.",
        4 => "The file save failed.",
        5 => "The params must be input.",
        6 => "The image get information invalid.",
        7 => "Must be set cropX & cropY & cropWidth & cropHeight first of Crop image.",
    ];

    /**
     * 要保存的图片文件
     * @var string
     */
    protected $file = '';

    /**
     * 要保存的目录
     * @var string
     */
    protected $dir = '';

    /**
     * 错误代码
     * @var int
     */
    protected $error_code = 0;

    /**
     * 文件上传最大KB
     * @var int
     */
    protected $max_size = -1;
    protected $size = 0;
    protected $name = '';

    /**
     * 图片裁剪的X坐标
     * @var int
     */
    protected $cropX = 0;

    /**
     * 图片裁剪的Y坐标
     * @var int
     */
    protected $cropY = 0;

    /**
     * 图片裁剪的宽度
     * @var int
     */
    protected $cropWidth = 0;

    /**
     * 图片裁剪的高度
     * @var int
     */
    protected $cropHeight = 0;

    /**
     * 文件保存的后缀
     * @var string
     */
    protected $_ext = '';


    /**
     * 缩略图宽高度
     * @var array
     */
    protected $thumb_width = [360,1024];

    /**
     * 图片保存前缀
     * @var string
     */
    protected $prefix = '';

    /**
     * @var FileProvider
     */
    private $fileHandler = null;

    /**
     * The first run the middleware.
     */
    public function middleware()
    {
        // TODO: Implement middleware() method.
    }

    /**
     * instance register.
     */
    public function register()
    {
        // TODO: Implement register() method.
        $this->max_size = conf('app','imageMaxFileSize');
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub

        $this->setFile("");
        $this->setSize(0);
        $this->setName("");
        $this->setCropX(0);
        $this->setCropY(0);
        $this->setCropWidth(0);
        $this->setCropHeight(0);
    }

    /**
     * run at save before.
     *
     * @param string $file
     * @param string $name
     * @return $this
     */
    public function initialize(string $file,string $name = ''){

        $this->dir = self::getBasePath().conf('storage','attachmentImages').formatTime(TIME_UTC,"Ymd")."/";

        if(!file_exists($this->getDir())){
            @mkdir($this->dir);
        }

        $this->setFile($file);
        $this->setName($name);

        return $this;
    }

    /**
     * example:
     * does not crop:
     * $upload = app()->getInstance(UploadFileProvider::class);
     * $res = $upload->initialize($image,"test")->save();
     *
     * dose crop the image:
     * $upload = app()->getInstance(UploadFileProvider::class);
     * $res = $upload
     *              ->setCropX(60)
     *              ->setCropY(60)
     *              ->setCropWidth(860)
     *              ->setCropHeight(456)
     *              ->initialize($image,"test")
     *              ->save();
     * return:
     * array(size = 8)
     * 'responseCode' => int 1
     * 'responseError' => string 'success.' (length=13)
     * 'size' => int 42
     * 'cropX' => int 60
     * 'cropY' => int 60
     * 'cropW' => int 860
     * 'cropH' => int 456
     * 'url' => string '/public/attachment/images/20170527/e9fef9c64cc51c5af079e3936694cea5.jpg' (length=71)
     *
     * @return array|bool
     */
    public function save(){
        if (empty($this->getFile())){
            $this->setErrorCode(0);
            return false;
        }

        list($type, $file) = explode(',', ($this->getFile()));

        $ext = "";
        if(strstr($type,'image/jpeg') !== ''){
            $ext = '.jpg';
        }elseif(strstr($type,'image/gif') !== ''){
            $ext = '.gif';
        }elseif(strstr($type,'image/png') !== ''){
            $ext = '.png';
        }elseif(strstr($type,'image/bmp') !== ''){
            $ext = '.bmp';
        }

        if(empty($ext)){
            $this->setErrorCode(2);
            return false;
        }

        $this->setSize((strlen($file) / 1024));

        if ($this->getMaxSize() > 0){
            if ($this->getMaxSize() < $this->getSize()){
                $this->setErrorCode(3);
                return false;
            }
        }

        $filename = $this->getNewFileName();
        $targetPath = $this->getNewFilePath($filename,$ext);

        /**
         * save the file.
         */
        if ($this->getFileHandler()->save($targetPath,base64_decode($file),true) == false){
            //throw new \Exception(sprintf("The file(%s) put invalid.",$targetPath));
            $this->setErrorCode(4);
            return false;
        }

        /**
         * crop the image.
         */
        if($this->isCrop()){
            try{
                $this->getImageProvider()
                    ->setCropX($this->getCropX())
                    ->setCropY($this->getCropY())
                    ->setCropHeight($this->getCropHeight())
                    ->setCropWidth($this->getCropWidth())
                    ->makeCrop($targetPath);

                $this->setSize(filesize($targetPath) / 1024);

            }catch (\Exception $e){
                $this->setErrorCode($e->getCode());
                return false;
            }

        }

        /**
         * create a thumb image.
         */
        if($this->isThumb()){
            try{
                $this->getImageProvider()
                    ->setDir($this->getDir())
                    ->setPrefix($this->getPrefix())
                    ->makeThumb($targetPath,$filename,$this->getThumbWidth());

            }catch (\Exception $e){
                $this->setErrorCode($e->getCode());
                return false;
            }
        }

        $this->setErrorCode(1);
        $res = [
            "responseCode" => 1,
            "responseError" => "success.",
            "size" => $this->getSize(),
            "cropX" => $this->getCropX(),
            "cropY" => $this->getCropY(),
            "cropW" => $this->getCropWidth(),
            "cropH" => $this->getCropHeight(),
            "url" => str_replace(self::getBasePath(),"/",$targetPath)
        ];

        return $res;
    }

    /**
     * @return FileProvider
     */
    protected function getFileHandler(): FileProvider
    {
        if ($this->fileHandler == null){
            $this->fileHandler = app(FileProvider::class);
        }
        return $this->fileHandler;
    }

    /**
     * @return int
     */
    protected function getCropHeight(): int
    {
        return $this->cropHeight;
    }

    /**
     * @return int
     */
    protected function getCropWidth(): int
    {
        return $this->cropWidth;
    }

    /**
     * @return int
     */
    protected function getCropX(): int
    {
        return $this->cropX;
    }

    /**
     * @return int
     */
    protected function getCropY(): int
    {
        return $this->cropY;
    }

    /**
     * get the directory of file.
     * @return string
     */
    protected function getDir(): string
    {
        return $this->dir;
    }

    /**
     * save the error code.
     * @return int
     */
    public function getErrorCode(): int
    {
        return $this->error_code;
    }

    /**
     * get save images error.
     * @return string
     */
    public function getError():string {
        return self::ERROR[$this->getErrorCode()];
    }

    /**
     * @return string
     */
    protected function getExt(): string
    {
        return $this->_ext;
    }

    /**
     * @return string
     */
    protected function getFile(): string
    {
        return $this->file;
    }

    /**
     * @return int
     */
    protected function getMaxSize(): int
    {
        return $this->max_size;
    }

    /**
     * @return string
     */
    protected function getName(): string
    {
        return $this->name;
    }

    /**
     * @return string
     */
    protected function getPrefix(): string
    {
        return $this->prefix;
    }

    /**
     * @return int
     */
    protected function getSize(): int
    {
        return $this->size;
    }

    /**
     * @return array
     */
    protected function getThumbWidth(): array
    {
        return $this->thumb_width;
    }


    /**
     * @param int $cropHeight
     * @return $this
     */
    public function setCropHeight(int $cropHeight)
    {
        $this->cropHeight = $cropHeight;
        return $this;
    }

    /**
     * @param int $cropWidth
     * @return $this
     */
    public function setCropWidth(int $cropWidth)
    {
        $this->cropWidth = $cropWidth;
        return $this;
    }

    /**
     * @param int $cropX
     * @return $this
     */
    public function setCropX(int $cropX)
    {
        $this->cropX = $cropX;
        return $this;
    }

    /**
     * @param int $cropY
     * @return $this
     */
    public function setCropY(int $cropY)
    {
        $this->cropY = $cropY;
        return $this;
    }

    /**
     * @param string $dir
     * @return $this
     */
    public function setDir(string $dir)
    {
        $this->dir = $dir;
        return $this;
    }


    /**
     * @param string $ext
     * @return $this
     */
    public function setExt(string $ext)
    {
        $this->_ext = $ext;
        return $this;
    }

    /**
     * @param string $file
     * @return $this
     */
    public function setFile(string $file)
    {
        $this->file = $file;
        return $this;
    }

    /**
     * @param int $max_size
     * @return $this
     */
    public function setMaxSize(int $max_size)
    {
        $this->max_size = $max_size;
        return $this;
    }


    /**
     * @param string $prefix
     * @return $this
     */
    public function setPrefix(string $prefix)
    {
        $this->prefix = $prefix;
        return $this;
    }

    /**
     * @param int $size
     * @return $this
     */
    public function setSize(int $size)
    {
        $this->size = $size;
        return $this;
    }


    /**
     * @param array $thumb_width
     * @return $this
     */
    public function setThumbWidth(array $thumb_width)
    {
        $this->thumb_width = $thumb_width;
        return $this;
    }



    /**
     * @param int $error_code
     */
    protected function setErrorCode(int $error_code)
    {
        $this->error_code = $error_code;
    }

    /**
     * @param string $name
     * @return $this
     */
    protected function setName(string $name)
    {
        $this->name = $name;
        return $this;
    }

    /**
     * @return string
     */
    protected function getNewFileName():string {
        return md5(time().$this->getName());
    }

    /**
     * @param string $fileName
     * @param string $ext
     * @return string
     */
    protected function getNewFilePath(string $fileName,string $ext):string {
        return $this->getDir().$this->getPrefix().$fileName.$this->getExt().$ext;
    }

    /**
     * @return bool
     */
    protected function isCrop():bool {
        return $this->getCropWidth() > 0 && $this->getCropHeight() > 0;
    }

    /**
     * @return bool
     */
    protected function isThumb():bool {
        return true;
    }

    /**
     * @return ImageProvider
     */
    protected function getImageProvider():ImageProvider{
        return app(ImageProvider::class);
    }

}